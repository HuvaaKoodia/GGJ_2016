using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MouseSelection : MonoBehaviour
{
    public RaycastHit hit;
    public Ray ray;

    Villager targetVillager;

    private List<Villager> villagers;

    public Timer timerThing;

    private bool isSelecting = false;
    Vector3 mousePosition1;

    // Use this for initialization
    void Awake()
    {
        ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        villagers = new List<Villager>();
    }

    // Update is called once per frame
    void Update()
    {
        selection();
    }

    void selection()
    {
        if (Input.GetKeyDown(KeyCode.Mouse0) && timerThing.isJudgementDay == false)
        {
            ray = Camera.main.ScreenPointToRay(Input.mousePosition);

<<<<<<< 8cb7a6e302e9fab699da4762afb79a5dedb6559c
            bool commandGiven = false;
            
            //find resource or cake
            if (Physics.Raycast(ray, out hit, 100, 1 << LayerMask.NameToLayer("Resource")))
            {
                var resource = hit.collider.GetComponent<ResourceView>();

                foreach (var aVillager in villagers)
                {
                    aVillager.getResource(resource);
                    aVillager.Deselect();
                    commandGiven = true;
                }
             }
             else if (Physics.Raycast(ray, out hit, 100, 1 << LayerMask.NameToLayer("Cake")))
             {
                foreach (var aVillager in villagers)
                {
                    aVillager.GoToBake(hit.transform.position);
                    aVillager.Deselect();
                    commandGiven = true;
                }
             }
=======
			//find resource or cake
			if (targetVillager)
			{
				if (Physics.Raycast(ray, out hit, 100, 1 << LayerMask.NameToLayer("Resource")))
				{
					var resource = hit.collider.GetComponent<ResourceView>();
				
					targetVillager.getResource(resource);
					targetVillager.Deselect();
					targetVillager = null;
					return;
				}
				else if (Physics.Raycast(ray, out hit, 100, 1 << LayerMask.NameToLayer("Cake")))
				{
					targetVillager.GoToBake();
					targetVillager.Deselect();
					targetVillager = null;
					return;
				}
			}
>>>>>>> 04beecd4787ca1b450a2dcec5d20b88dd91d9a4f

            if (commandGiven) villagers.Clear();
            
			//find villager
            if (Physics.Raycast(ray, out hit, 100,  1 << LayerMask.NameToLayer("Villager")))
            {
<<<<<<< 8cb7a6e302e9fab699da4762afb79a5dedb6559c

=======
				if (targetVillager) targetVillager.Deselect();
>>>>>>> 04beecd4787ca1b450a2dcec5d20b88dd91d9a4f
                targetVillager = hit.transform.GetComponent<Villager>();
                if (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.RightControl))
                {
                    villagers.Add(targetVillager);
                    targetVillager.Select();
                }
                else 
                {
                    foreach (var villager in villagers) villager.Deselect();
                    villagers.Clear();
                    villagers.Add(targetVillager);
                    targetVillager.Select();
                }
            }

            else if (Physics.Raycast(ray, out hit, 100, 1 << LayerMask.NameToLayer("Ground")))
            {
                isSelecting = true;
                mousePosition1 = Input.mousePosition;
            }
        }
        else if (Input.GetMouseButtonUp(0) && isSelecting)
        {
            foreach (var villager in villagers) villager.Deselect();
            villagers.Clear();

            isSelecting = false;
            var allVillagers = new List<Villager>(FindObjectsOfType<Villager>());
            var camera = Camera.main;
            var viewportBounds = Utils.GetViewportBounds(camera, mousePosition1, Input.mousePosition);
            foreach (var villager in allVillagers)
            {
                if (viewportBounds.Contains(camera.WorldToViewportPoint(villager.transform.position)))
                {
                    villagers.Add(villager);
                    villager.Select();
                }
            }
        }
    }

    void OnGUI()
    {
        if (isSelecting)
        {
            var rect = Utils.GetScreenRect(mousePosition1, Input.mousePosition);
            Utils.DrawScreenRect(rect, new Color(0.8f, 0.8f, 0.95f, 0.25f));
            Utils.DrawScreenRectBorder(rect, 2, new Color(0.8f, 0.8f, 0.95f));
        }
    }
}
